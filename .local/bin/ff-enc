#!/bin/sh

# Safer execution (POSIX-compatible)
set -e
set -u

# Configuration
video_output_dir="encVids"
audio_output_dir="extAudios"
temp_work_dir=$(mktemp -d -t ffmpeg-process-XXXXXX)
trap 'rm -rf "$temp_work_dir"' EXIT

# File extensions
video_extensions="mp4 mkv ts mov avi webm gif"
audio_extensions="mp4 mkv avi mov webm flv wmv mpg mpeg"

# Processing parameters
target_fps=30
shutdown=false
cover_timestamp="00:10:00"

# Utility Functions
die() {
    echo >&2 "Error: $1"
    exit 1
}

validate_timestamp() {
    case "$1" in
        [0-9][0-9]:[0-9][0-9]:[0-9][0-9]) return 0 ;;
        *) die "Invalid timestamp format: $1" ;;
    esac
}

find_media_files() {
    type=$1
    exts=""
    
    case $type in
        video) exts="$video_extensions" ;;
        audio) exts="$audio_extensions" ;;
        *) die "Invalid media type: $type" ;;
    esac
    
    # Build find command
    query=""
    first=true
    for ext in $exts; do
        if [ "$first" = true ]; then
            query="$query -iname \"*.$ext\""
            first=false
        else
            query="$query -o -iname \"*.$ext\""
        fi
    done
    
    eval "find . -maxdepth 1 -type f \( $query \)"
}

# Core Functions
encode_videos() {
    mkdir -p "$video_output_dir"
    
    find_media_files video | while IFS= read -r file; do
        base_name=$(basename "$file")
        output_file="$video_output_dir/${base_name%.*}.mp4"
        
        if [ -f "$output_file" ]; then
            echo "Skipping: $base_name (exists)"
            continue
        fi
        
        echo "Processing: $base_name"
        
        # Frame rate handling
        if [ "$target_fps" = "copy" ]; then
            fps=$(ffprobe -v error -select_streams v:0 \
                  -show_entries stream=r_frame_rate -of csv=p=0 "$file" | bc -l)
            echo "Original FPS: $fps"
        else
            fps=$target_fps
        fi

        ffmpeg -nostdin -i "$file" \
            -c:v libx265 -preset fast -x265-params no-sao=1:bframes=8 \
            -vf "scale=ceil(iw/2)*2:ceil(ih/2)*2,fps=$fps" \
            -c:a libopus -b:a 128k -vbr on \
            -movflags +faststart -tag:v hvc1 \
            "$output_file" || echo "Failed to process $base_name"
    done
}

extract_audio() {
    mkdir -p "$audio_output_dir"
    timestamp=${1:-$cover_timestamp}
    validate_timestamp "$timestamp"

    find_media_files audio | while IFS= read -r video; do
        base_name=$(basename "$video")
        temp_audio="$temp_work_dir/${base_name%.*}.m4a"
        output_file="$audio_output_dir/${base_name%.*}.m4a"
        cover_art="$temp_work_dir/${base_name%.*}_cover.jpg"

        echo "Processing audio for: $base_name"

        # Extract cover art
        ffmpeg -nostdin -y -ss "$timestamp" -i "$video" -vframes 1 "$cover_art" 2>/dev/null || continue

        # Extract and process audio
        if ! ffmpeg -nostdin -y -i "$video" -vn -c:a copy -strict -2 "$temp_audio" 2>/dev/null; then
            ffmpeg -nostdin -y -i "$video" -vn -c:a aac -b:a 192k "$temp_audio"
        fi

        # Embed metadata
        ffmpeg -nostdin -y -i "$temp_audio" -i "$cover_art" \
            -map 0:a -map 1 -c copy -disposition:v:0 attached_pic \
            -metadata:s:v title="Album cover" \
            -metadata:s:v comment="Cover (front)" \
            "$output_file"
    done
}

crop_video() {
    printf "Enter aspect ratio (e.g., 0.56 for 9:16 vertical): "
    read -r aspect_ratio
    
    case $aspect_ratio in
        *[!0-9.]*) die "Invalid aspect ratio" ;;
    esac

    printf "Enter input filename: "
    read -r input_file
    [ -f "$input_file" ] || die "File not found: $input_file"

    output_file="${input_file%.*}_cropped.mp4"
    
    ffmpeg -i "$input_file" -vf "crop=iw:iw/$aspect_ratio" \
        -c:a copy -c:v libx265 -preset fast \
        "$output_file"
}

# Main Execution
# Dependency checks
for cmd in ffprobe ffmpeg; do
    command -v "$cmd" >/dev/null 2>&1 || die "Missing dependency: $cmd"
done

# Argument parsing
action=""
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            cat << EOF
Optimized Media Processing Tool

Usage: $0 [options]

Options:
  -v, --video        Encode videos to HEVC/H.265
  -a, --audio [TIME] Extract audio with cover art (default: 00:10:00)
  -c, --crop         Crop video to custom aspect ratio
  --fps RATE         Target framerate (number or 'copy')
  --shutdown         Power off after completion
  -h, --help         Show this help

Examples:
  $0 -v --fps copy
  $0 -a 00:03:00
  $0 -v --shutdown
EOF
            exit 0
            ;;
        -v|--video) action="video" ;;
        -a|--audio)
            action="audio"
            if [ $# -ge 2 ]; then
                case "$2" in
                    [0-9][0-9]:[0-9][0-9]:[0-9][0-9])
                        cover_timestamp=$2
                        shift
                        ;;
                esac
            fi
            ;;
        -c|--crop) action="crop" ;;
        --fps)
            target_fps=$2
            shift
            case "$target_fps" in
                ''|*[!0-9]*) [ "$target_fps" = "copy" ] || die "Invalid FPS value" ;;
            esac
            ;;
        --shutdown) shutdown=true ;;
        *) die "Unknown option: $1" ;;
    esac
    shift
done

# Execute action
case "$action" in
    video) encode_videos ;;
    audio) extract_audio "$cover_timestamp" ;;
    crop) crop_video ;;
    *) die "No action specified. Use -h for help." ;;
esac

# Final cleanup and shutdown
if [ "$shutdown" = true ]; then
    echo "Processing complete. System will shutdown in 60 seconds..."
    sleep 60
    sudo poweroff
fi
