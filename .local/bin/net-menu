#!/bin/sh

# Function for color escape sequences
esc() {
    printf '\033%s' "$1"
}

# Display the current status of network connections
display_status() {
    printf "\n%s--- Network Status --- %s\n" "$(esc "[1;34m")" "$(esc "[0m")"

    # List available Wi-Fi networks
    nmcli --fields SSID,SIGNAL,BARS,SECURITY device wifi list
    echo

    # Show current Wi-Fi connection status
    connected_wifi=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d':' -f2)
    if [ -n "$connected_wifi" ]; then
        printf "%sCurrently connected to Wi-Fi: %s%s\n" "$(esc "[1;32m")" "$connected_wifi" "$(esc "[0m")"
    else
        printf "%sNo active Wi-Fi connection.%s\n" "$(esc "[1;31m")" "$(esc "[0m")"
    fi
    echo

    # Show current Bluetooth status
    bluetooth_status=$(bluetoothctl show | awk '/Powered/ {print $2}')
    if [ "$bluetooth_status" = "yes" ]; then
        paired_devices=$(bluetoothctl devices)
        printf "%sBluetooth is powered on.%s\n" "$(esc "[1;32m")" "$(esc "[0m")"
        if [ -n "$paired_devices" ]; then
            printf "\nPaired Bluetooth devices:\n%s%s\n" "$(esc "[32m")" "$paired_devices"
        else
            printf "No paired Bluetooth devices found.\n"
        fi
    else
        printf "%sBluetooth is powered off.%s\n" "$(esc "[1;31m")" "$(esc "[0m")"
    fi
    echo

    # Show ProtonVPN status
    vpn_status=$(nmcli connection show --active | grep -i protonvpn)
    if [ -n "$vpn_status" ]; then
        printf "%sProtonVPN is connected.%s\n" "$(esc "[1;32m")" "$(esc "[0m")"
    else
        printf "%sProtonVPN is not connected.%s\n" "$(esc "[1;31m")" "$(esc "[0m")"
    fi
}

# Function to show available Wi-Fi networks
show_simple_wifi_list() {
    printf "\n%s--- Select Wi-Fi Network --- %s\n" "$(esc "[1;34m")" "$(esc "[0m")"
    nmcli --fields SSID device wifi | grep -v "^SSID" | sed '/^\s*$/d' | nl
}

# Function to connect to a Wi-Fi network
connect_to_wifi() {
    show_simple_wifi_list
    printf "Enter the number of the Wi-Fi network to connect to: "
    read -r choice

    # Get the SSID of the selected choice, preserving spaces
    ssid=$(nmcli --fields SSID device wifi | grep -v "^SSID" | sed '/^\s*$/d' | awk -v choice="$choice" 'NR == choice {print $0}')

    # Trim leading and trailing whitespace from SSID
    ssid=$(echo "$ssid" | xargs)

    if [ -n "$ssid" ]; then
        # Check if the Wi-Fi network is already saved
        stored_network=$(nmcli connection show | grep -i "$ssid" || true)

        if [ -z "$stored_network" ]; then
            # If network isn't saved, ask for password and save it
            printf "Enter password for %s: " "$ssid"
            stty -echo
            read -r password
            stty echo
            printf "\n"

            # Connect and save the credentials for future use
            nmcli device wifi connect "$ssid" password "$password" && \
            printf "%sConnected to %s (Password Saved)%s\n" "$(esc "[1;32m")" "$ssid" "$(esc "[0m")"
        else
            # If network is saved, just connect automatically
            nmcli device wifi connect "$ssid" && \
            printf "%sConnected to %s (Using saved password)%s\n" "$(esc "[1;32m")" "$ssid" "$(esc "[0m")"
        fi
    else
        printf "%sInvalid selection. No connection made.%s\n" "$(esc "[1;31m")" "$(esc "[0m")"
    fi
}

# Function to connect to a Bluetooth device
connect_bluetooth() {
    bluetoothctl power on
    bluetoothctl scan on & sleep 5
    bluetoothctl scan off

    devices=$(bluetoothctl devices)
    if [ -z "$devices" ]; then
        printf "%sNo Bluetooth devices found.%s\n" "$(esc "[1;31m")" "$(esc "[0m")"
        return
    fi

    i=1
    echo "$devices" | while read -r device; do
        device_mac=$(echo "$device" | awk '{print $2}')
        device_name=$(bluetoothctl info "$device_mac" | awk -F 'Name: ' '/Name/ {print $2}')
        [ -z "$device_name" ] && device_name="$device_mac"
        printf "%d. %s (%s)\n" "$i" "$device_name" "$device_mac"
        i=$((i + 1))
    done

    printf "Enter the number of the Bluetooth device to connect to: "
    read -r choice
    device_mac=$(echo "$devices" | awk -v choice="$choice" 'NR == choice {print $2}')
    if [ -n "$device_mac" ]; then
        bluetoothctl connect "$device_mac" && \
        printf "%sConnected to %s%s\n" "$(esc "[1;32m")" "$device_mac" "$(esc "[0m")"
    else
        printf "%sInvalid selection. No connection made.%s\n" "$(esc "[1;31m")" "$(esc "[0m")"
    fi
}

# Function to toggle ProtonVPN connection
toggle_vpn() {
    CONNECTION_NAME="protonvpn"
    vpn_status=$(nmcli connection show --active | grep -i protonvpn)
    if [ -n "$vpn_status" ]; then
        sudo nmcli connection down "$CONNECTION_NAME" && \
        printf "%sVPN disconnected.%s\n" "$(esc "[1;31m")" "$(esc "[0m")"
    else
        sudo nmcli connection up "$CONNECTION_NAME" && \
        printf "%sVPN connected.%s\n" "$(esc "[1;32m")" "$(esc "[0m")"
    fi
}

# Display network status
display_status

# Interactive menu
while true; do
    printf "\n%s--- Choose an Action --- %s\n" "$(esc "[1;34m")" "$(esc "[0m")"
    printf "1. Connect to Wi-Fi network\n"
    printf "2. Connect to Bluetooth device\n"
    printf "3. Toggle ProtonVPN\n"
    printf "4. Exit\n"
    printf "Choose (1-4): "
    read -r choice

    case $choice in
        1) connect_to_wifi ;;
        2) connect_bluetooth ;;
        3) toggle_vpn ;;
        4) echo "Exiting." ; break ;;
        *) printf "%sInvalid choice. Try again.%s\n" "$(esc "[1;31m")" "$(esc "[0m")" ;;
    esac
done
