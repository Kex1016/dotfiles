#!/bin/sh

# Configuration
VPN_CONNECTION="protonvpn"
LOCKFILE="/tmp/network-manager.lock"

# Color definitions
BLUE=$(tput setaf 4)
GREEN=$(tput setaf 2)
RED=$(tput setaf 1)
BOLD=$(tput bold)
RESET=$(tput sgr0)

# Cleanup function
cleanup() {
    rm -f "$LOCKFILE"
    stty echo
    exit 0
}

trap cleanup INT TERM EXIT

# Check for existing instance
[ -e "$LOCKFILE" ] && { echo "${RED}Error: Another instance is running!${RESET}" >&2; exit 1; }
touch "$LOCKFILE"

# Privilege escalation
run_privileged() {
    command -v sudo >/dev/null && sudo "$@" ||
    command -v pkexec >/dev/null && pkexec "$@" || {
        echo "${RED}Error: No privilege tool found${RESET}" >&2
        return 1
    }
}

# Deduplicated network list
get_wifi_list() {
    nmcli --fields SSID,SIGNAL,BARS,SECURITY device wifi list | awk '
        BEGIN { FS="  +"; max = 0 }
        NR == 1 { print; next }
        {
            ssid = $1
            gsub(/^[ \t]+|[ \t]+$/, "", ssid)
            if (!seen[ssid] || $2 > seen[ssid]) {
                seen[ssid] = $2
                lines[ssid] = $0
            }
        }
        END { for (s in lines) print lines[s] | "sort -k2 -nr" }'
}

# Network status display
show_network_status() {
    echo "\n${BLUE}${BOLD}--- Network Status ---${RESET}"
    connected_wifi=$(nmcli -t -f active,ssid dev wifi | awk -F: '$1 == "yes" {print $2}')
    [ -n "$connected_wifi" ] && echo "${GREEN}Connected: $connected_wifi${RESET}" || echo "${RED}No Wi-Fi${RESET}"
    nmcli connection show --active | grep -qi "$VPN_CONNECTION" && echo "${GREEN}VPN: Connected${RESET}" || echo "${RED}VPN: Disconnected${RESET}"
}

# Connect to Wi-Fi
connect_wifi() {
    echo "\n${BLUE}${BOLD}--- Available Networks ---${RESET}"
    wifi_list=$(get_wifi_list)
    echo "$wifi_list" | awk 'NR>1' | nl
    printf "\n${BOLD}Enter number (0 to cancel): ${RESET}"
    read -r choice
    [ "$choice" -eq 0 ] 2>/dev/null && return

    ssid=$(echo "$wifi_list" | awk 'NR>1' | sed -n "${choice}p" | awk '{sub(/^[ \t]+/, ""); print $1}')
    [ -z "$ssid" ] && { echo "${RED}Invalid choice${RESET}"; return; }

    if nmcli connection show | grep -q "$ssid"; then
        nmcli device wifi connect "$ssid" && echo "${GREEN}Connected!${RESET}" || echo "${RED}Connection failed${RESET}"
    else
        printf "Password: "
        stty -echo
        read -r password
        stty echo
        printf "\n"
        nmcli device wifi connect "$ssid" password "$password" && echo "${GREEN}Connected!${RESET}" || echo "${RED}Failed${RESET}"
    fi
}

# Disconnect Wi-Fi
disconnect_wifi() {
    connected=$(nmcli -t -f active,ssid dev wifi | awk -F: '$1 == "yes" {print $2}')
    [ -z "$connected" ] && { echo "${RED}Not connected${RESET}"; return; }
    nmcli connection down "$connected" && echo "${GREEN}Disconnected: $connected${RESET}" || echo "${RED}Disconnect failed${RESET}"
}

# VPN management
toggle_vpn() {
    if nmcli connection show --active | grep -qi "$VPN_CONNECTION"; then
        run_privileged nmcli connection down "$VPN_CONNECTION" && echo "${GREEN}VPN disconnected${RESET}" || echo "${RED}VPN disconnect failed${RESET}"
    else
        run_privileged nmcli connection up "$VPN_CONNECTION" && echo "${GREEN}VPN connected${RESET}" || echo "${RED}VPN connect failed${RESET}"
    fi
}

# Main menu
main_menu() {
    while true; do
        show_network_status
        echo "\n${BLUE}${BOLD}--- Main Menu ---${RESET}"
        echo "1) Connect to Wi-Fi"
        echo "2) Disconnect Wi-Fi"
        echo "3) Toggle VPN"
        echo "4) Refresh"
        echo "5) Exit"
        printf "\n${BOLD}Choice (1-5): ${RESET}"
        read -r choice

        case $choice in
            1) connect_wifi ;;
            2) disconnect_wifi ;;
            3) toggle_vpn ;;
            4) continue ;;
            5) break ;;
            *) echo "${RED}Invalid option${RESET}" ;;
        esac
        sleep 1
    done
}

# Initial checks
command -v nmcli >/dev/null || { echo "${RED}NetworkManager required${RESET}" >&2; exit 1; }

main_menu
cleanup
